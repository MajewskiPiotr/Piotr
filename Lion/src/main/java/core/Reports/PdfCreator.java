package core.Reports;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import core.Tools.Configuration.Property;
import org.testng.ITestResult;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;


public class PdfCreator {
    private static String FILE = Property.getProperty("basePath") + "/Lion/DaneTestowe/raport" + new Date().getTime() + ".pdf";
    //     "c:\\Applications\\FirstPdf.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFontFail = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD, BaseColor.RED);
    private static Font subFontPass = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD, BaseColor.GREEN);
    private static Font scenarioFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);

    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);


    private static void addContent(Document document, java.util.List<ITestResult> resultList) throws DocumentException, IOException {

        String basePath = Property.getProperty("basePath");
        String path = "";
        Anchor anchor = new Anchor("First Chapter", catFont);
        anchor.setName("First Chapter");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);
        Paragraph subPara;
        Section subCatPart;
        for (ITestResult result : resultList) {
            if (result.isSuccess()) {
                subPara = new Paragraph(result.getName(), subFontPass);
                subPara.add(new Paragraph("Test PASS", new Font(Font.FontFamily.TIMES_ROMAN, 10,
                        Font.NORMAL, BaseColor.GREEN)));
                Paragraph screenShot = new Paragraph();
                path = basePath + "\\Lion\\DaneTestowe\\" +
                        result.getInstance().getClass().getSimpleName() + "\\ScreenShots" + "\\PASS_" + result.getMethod().getMethodName() + ".jpg";

                Image screen = Image.getInstance(path);
                screen.scalePercent(10);
                screenShot.add(screen);
                subPara.add(screenShot);
                subCatPart = catPart.addSection(subPara);
            } else {
                subPara = new Paragraph(result.getName(), subFontFail);
                subPara.add(new Paragraph(result.getThrowable().getMessage(), new Font(Font.FontFamily.TIMES_ROMAN, 10,
                        Font.NORMAL, BaseColor.RED)));
                Paragraph screenShot = new Paragraph();
                path = basePath + "\\Lion\\DaneTestowe\\" +
                        result.getInstance().getClass().getSimpleName() + "\\ScreenShots" + "\\FAIL_" + result.getMethod().getMethodName() + ".jpg";

                Image screen = Image.getInstance(path);
                screen.scalePercent(10);
                screenShot.add(screen);
                subPara.add(screenShot);
                subCatPart = catPart.addSection(subPara);
            }
        }


        // now add all this to the document
        document.add(catPart);

    }

    public static void create(java.util.List<ITestResult> result) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document, result);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Raport z test√≥w projektu Lion", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));


        preface.add(new Paragraph(
                "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }


    private static void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}